import Farray
import Proto
class Cluster:
	def __init__(self):
		self.clusters={}
		self.distance=[]

	def calcdist(i,j,fa):
		dval=0
		for k in fa[i]:
			for l in fa[j]:
				dval = dval + (l-k)*(l-k)
		dval = dval**(0.5)
		return dval

	def init_distance(prototypes,fa):
		for i in prototypes:
			row=[]
			for j in prototypes:
				if i<j:
					row.append(calcdist(i,j,fa))
				else:
					row.append(0)
			self.distance.append(row)
		for i in prototypes:
			self.clusters[i]=[]

	def merge_cluster(r,c,fa):
		for i in xrange(len(fa[r])):
			fa[c].append(fa[r][i])
			fa[r].pop(i)
	
	def find_nearest_proto(i,prototypes,fa):
		min_dist=100
		ind=0
		for j in prototypes:
			d=calcdist(i,j,fa)
			if d<min_dist:
				min_dist=d
				ind=j
		return ind

	def assign_cluster(z,i):
		self.clusters[z].append(i)
'''
		for i in xrange(len(fa)):
			self.dist[i]=5
		#index of the maxdist report
		z=max(self.dist)
		while self.dist[z] > 0.65:
			#compute distance of every other report from this report
			for i in dist and i != z:
				if i in pr:
					continue
				dval=0
				for j in fa[i]:
					for k in fa[z]:
						dval = dval + (j-k)*(j-k)
				dval = dval**(0.5)
				if dist[i] > dval:
					dist[i]=dval
			#add z to prototypes
			self.pr.append(z)
			self.dist.pop(z)
			z=max(self.dist)

		return self.pr
'''			

	def cluster_proto(self,fa,prototypes):
		z=0
		init_distance(prototypes,fa)
		while min(self.distance) < 0.95:
			row_ind=self.distance.index(min(self.distance))
			col_ind=self.distance[row_ind].index(min(self.distance[row_ind]))
			prototypes.pop(row_ind)
			merge_cluster(row_ind,col_ind,fa)
			init_distance(prototypes,fa)
		for i in fa:
			z=find_nearest_proto(i,prototypes,fa)
			assign_cluster(z,i)
						

						
				
